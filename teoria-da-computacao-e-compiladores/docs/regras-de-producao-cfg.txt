<algoritmo> ::= "bloco" <comando*> "fim"

<comando> ::= <smt_var_decl>
    | <smt_var_attr>
    | <smt_func>
    | <smt_retorna>
    | <smt_cond_se>
    | <smt_cond_caso>
    | <smt_cond_senao>
    | <smt_for_numerico>
    | <smt_for_iteravel>
    | <smt_enquanto>
    | <expr_logica>

<smt_var_decl> ::= "declarar" <ident> = <expr_logica>
<smt_var_attr> ::= <ident> = <expr_logica>

<smt_func> ::= "funcao" <ident> "(" [<ident>,?]* ")" <comando*> "fim"

<smt_retorna> ::= "retorna"
<smt_func_anom> ::= "funcao" "(" [<ident>,?]* ")" <comando*> "fim"

<smt_cond_se> ::= "se" <expr_logica> "faca" <comando*> (<smt_cond_caso> | <smt_cond_senao>)?
<smt_cond_caso> ::= "caso" <expr_logica> "faca" <comando*> (<smt_cond_caso> | <smt_cond_senao>)?
<smt_cond_senao> ::= "senao" "faca" (<comando*>)

<smt_for_numerico> ::= "para" ["de" <expr_logical>]? ["ate" <expr_logica>]? ["opere" <smt_var_attr>]? "faca" <comando*> "fim"
<smt_for_iteravel> ::= "para" "cada" <ident>, <ident> "em" <expr_logica> "faca" <comando*> "fim"

<smt_enquanto> ::= "enquanto" <expr_logical> "faca" <comando*> "fim"

<expr_logica> ::= <expr_logica> ou <expr_cond>
    | <expr_logica> e <expr_cond>
    | <expr_cond>

<expr_cond> ::= <expr_cond> == <expr>
    | <expr_cond> != <expr>
    | <expr_cond> >= <expr>
    | <expr_cond> > <expr>
    | <expr_cond> <= <expr>
    | <expr_cond> < <expr>
    | <expr>

<expr> ::= <expr> + <termo>
    | <expr> - <termo>
    | <termo>

<termo> ::= <termo> * <fator>
    | <termo> / <fator>
    | <termo> ^ <fator>
    | <fator>

<fator> ::= ("negar" | "-") <valor>
    | <valor>
    | "(" <valor> ")"
    | "(" <expr_logica> ")"

<valor> ::= <nulo>
    | <nulo>
    | <booleano>
    | <numero>
    | <texto>
    | <lista>
    | <dicionario>

<ident> ::= [a-zA-Z_][a-zA-Z0-9_]*
<nulo> ::= "nulo"
<booleano> ::= "verdadeiro" | "falso"  
<numero> ::= [0-9]+
<texto> ::= '"' .* '"'

<lista> ::= "[" [<valor>,?]* "]"
<dicionario> ::= "{" [ "[" <valor> "]" "=" <valor>,? ]* "}"
